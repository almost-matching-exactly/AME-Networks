all_features = gen_all_features(G, all_subgraphs)
# Gives graph
G <- graph_from_adjacency_matrix(A, mode = 'undirected')
# print(paste("max threshold = ", threshold) )
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info,
threshold)
# print('Finished enumerating; started classifying')
all_features = gen_all_features(G, all_subgraphs)
unlist(all_features$feats)
val
q
qs
G
X
Z
all_features$feats
all_features$types
V(G)$color
G <- set_vertex_attr(G, 'color', value = Z, index = units_with_treatment_info)
# print(paste("max threshold = ", threshold) )
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info,
threshold)
G <- set_vertex_attr(G, 'color', value = Z)#, index = units_with_treatment_info)
# Gives graph
G <- graph_from_adjacency_matrix(A, mode = 'undirected')
G <- set_vertex_attr(G, 'color', value = Z)#, index = units_with_treatment_info)
# print(paste("max threshold = ", threshold) )
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info,
threshold)
# print('Finished enumerating; started classifying')
all_features = gen_all_features(G, all_subgraphs)
all_features$feats
unlist(all_features$feats)
require(Rcpp)
require(RcppArmadillo)
require(igraph)
require(magrittr)
source('network_flame_sims_old.R')
source('FLAME_bit 2.R')
source('ATE.R')
sourceCpp('subgraph_enumerate_old.cpp')
require(purrr)
library(magrittr)
library(dplyr)
# library(splitstackshape)
bin_counts = function(dta, probs = seq(0, 1, length.out = 10)){
data.frame(apply(dta, 2, function(x){
qs = unique(quantile(x, probs))
if(length(unique(qs)) > 1){
xc = as.character(cut(x, breaks=qs, include.lowest = T))
xc[x==0] = '0'
return(xc)
}else{
return(as.character(x))
}
}),
stringsAsFactors = T)
}
is_degenerate <- function(train, holdout) {
train <- train[, -ncol(train)]
all_dat <-
rbind(train, holdout) %>%
mutate(data_type = c(rep(0, nrow(train)),
rep(1, nrow(holdout))))
treatment_by_outcome <-
all_dat %>%
group_by(outcome, data_type) %>%
summarise(n_treated = length(unique(treated))) %>%
pull(n_treated)
outcome_by_treated <-
all_dat %>%
group_by(treated, data_type) %>%
summarise(n_outcomes = length(unique(outcome))) %>%
pull(n_outcomes)
if (any(c(treatment_by_outcome, outcome_by_treated) == 1)) {
return(TRUE)
}
return(FALSE)
}
split_test_train <- function(tmp, percent_holdout = 0.1) {
tmp_treated <- filter(tmp, treated == 1)
n_treated <- nrow(tmp_treated)
treated_holdout_inds <- sample(1:n_treated, round(percent_holdout * n_treated))
tmp_treated_holdout <- tmp_treated[treated_holdout_inds, ]
tmp_treated_train <- tmp_treated[-treated_holdout_inds, ]
tmp_control <- filter(tmp, treated == 0)
n_control <- nrow(tmp_control)
control_holdout_inds <- sample(1:n_control, round(percent_holdout * n_control))
tmp_control_holdout <- tmp_control[control_holdout_inds, ]
tmp_control_train <- tmp_control[-control_holdout_inds, ]
tmp_train <- rbind(tmp_treated_train, tmp_control_train)
tmp_holdout <- rbind(tmp_treated_holdout, tmp_control_holdout)
# If don't have both treatments and both outcomes for
# both train and holdout, split again
if (length(unique(tmp_train$treated)) == 1 |
length(unique(tmp_train$outcome)) == 1 |
length(unique(tmp_holdout$treated)) == 1 |
length(unique(tmp_holdout$outcome)) == 1) {
return(split_test_train(tmp, percent_holdout))
}
return(list(train = tmp_train,
holdout = tmp_holdout))
}
my_combn <- function(x, m) {
if (length(x) == 1) {
return(list(x))
}
return(combn(as.integer(x), m, simplify = FALSE))
}
## Load in data, name the adjacency matrix A, outcome Y, treatment Z, categorical covariates X
# Navigate to where the RProject is
#setwd('/Users/vittorioorlandi/Desktop/Network FLAME/Network-FLAME/')
setwd("/Users/musaidawan/Dropbox/Duke/Projects/Data for Network paper/Network-FLAME/")
village_codes <- setdiff(c(1:77), c(13,22))
net_flame_output <- matrix(NA, nrow = 77, ncol = 3)
# adjency_out <-  read.xlsx("/Users/musaidawan/Dropbox/Duke/Projects/Data for Network paper/Network-FLAME/flame_output/adjency_stats_sum_g_eq_3.xlsx",
#                          header = FALSE) %>%
#   as.matrix()
#high_d_villages <- adjency_out[which(adjency_out[,2] > 5 | adjency_out[,3] > 18)]
# adjency_out[ adjency_out[, 2] > 6 | adjency_out[, 3] > 18, ]
village_codes <- setdiff(c(9:77), c(13,22))
qs <- 1
val=1
A1 <-
read.csv(paste('./Data/Adjency/adj_visitgo_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A2 <-
read.csv(paste('./Data/Adjency/adj_visitcome_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A3 <-
read.csv(paste('./Data/Adjency/adj_rel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A4 <-
read.csv(paste('./Data/Adjency/adj_nonrel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
# union of three adjency matrix
A <- ((A1 + A2 + A3 + A4) >= 3) * 1
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
# index of units with degree > threshold
index_max_connections <- which(row_sum > 15)
row_sum <- rowSums(A)
print(paste('average degree is:',mean(row_sum)))
print(paste('max degree is:',max(row_sum)))
# index of units with degree > threshold
index_max_connections <- which(row_sum > 15)
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
# row index of untreated units
#untreated <- which(Z == 0)
untreated <- demographics$adjmatrix_key[demographics$Z == 0]
# drop units with degree connection > 15
demographics <- demographics[!demographics$adjmatrix_key %in% index_max_connections,]
units_with_treatment_info <- demographics$adjmatrix_key
#A <- A[units_with_treatment_info, units_with_treatment_info]
Y <- demographics$Y
Z <- demographics$Z
X <- demographics[, which(!colnames(demographics) %in% c('adjmatrix_key', 'Y', 'Z'))]
X <- X[,c("age","telugu")]
# To drop control -- control edges
# A[untreated, untreated] <- 0
# To drop any edges involving a control individual
A[untreated, ] <- 0
A[, untreated] <- 0
n <- dim(A)[1]
# Gives graph
G <- graph_from_adjacency_matrix(A, mode = 'undirected')
threshold <- 4
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info, threshold)
all_features = gen_all_features(G, all_subgraphs)
all_features$feats
all_features$types
all_features$feats
unlist(all_features$feats)
unlist(all_features$feats)
lfeats
lfeats = readRDS('application_output/features/all_features_1_question_1.rds')
unlist(lfeats$feats)
all_features$feats
all_features$feats
lfeats$types
lfeats$feats
lfeats = readRDS('application_output/features/all_features_2_question_1.rds')
lfeats
unlist(lfeas)
unlist(lfeats)
unlist(lfeats$feats)
lfeats$feats
lfeats$feats
all_features$feats
lfeats$feats
all_features$feats
require(Rcpp)
require(RcppArmadillo)
require(igraph)
require(magrittr)
source('network_flame_sims_old.R')
source('FLAME_bit 2.R')
source('ATE.R')
sourceCpp('subgraph_enumerate.cpp')
require(purrr)
library(magrittr)
library(dplyr)
# library(splitstackshape)
bin_counts = function(dta, probs = seq(0, 1, length.out = 10)){
data.frame(apply(dta, 2, function(x){
qs = unique(quantile(x, probs))
if(length(unique(qs)) > 1){
xc = as.character(cut(x, breaks=qs, include.lowest = T))
xc[x==0] = '0'
return(xc)
}else{
return(as.character(x))
}
}),
stringsAsFactors = T)
}
is_degenerate <- function(train, holdout) {
train <- train[, -ncol(train)]
all_dat <-
rbind(train, holdout) %>%
mutate(data_type = c(rep(0, nrow(train)),
rep(1, nrow(holdout))))
treatment_by_outcome <-
all_dat %>%
group_by(outcome, data_type) %>%
summarise(n_treated = length(unique(treated))) %>%
pull(n_treated)
outcome_by_treated <-
all_dat %>%
group_by(treated, data_type) %>%
summarise(n_outcomes = length(unique(outcome))) %>%
pull(n_outcomes)
if (any(c(treatment_by_outcome, outcome_by_treated) == 1)) {
return(TRUE)
}
return(FALSE)
}
split_test_train <- function(tmp, percent_holdout = 0.1) {
tmp_treated <- filter(tmp, treated == 1)
n_treated <- nrow(tmp_treated)
treated_holdout_inds <- sample(1:n_treated, round(percent_holdout * n_treated))
tmp_treated_holdout <- tmp_treated[treated_holdout_inds, ]
tmp_treated_train <- tmp_treated[-treated_holdout_inds, ]
tmp_control <- filter(tmp, treated == 0)
n_control <- nrow(tmp_control)
control_holdout_inds <- sample(1:n_control, round(percent_holdout * n_control))
tmp_control_holdout <- tmp_control[control_holdout_inds, ]
tmp_control_train <- tmp_control[-control_holdout_inds, ]
tmp_train <- rbind(tmp_treated_train, tmp_control_train)
tmp_holdout <- rbind(tmp_treated_holdout, tmp_control_holdout)
# If don't have both treatments and both outcomes for
# both train and holdout, split again
if (length(unique(tmp_train$treated)) == 1 |
length(unique(tmp_train$outcome)) == 1 |
length(unique(tmp_holdout$treated)) == 1 |
length(unique(tmp_holdout$outcome)) == 1) {
return(split_test_train(tmp, percent_holdout))
}
return(list(train = tmp_train,
holdout = tmp_holdout))
}
my_combn <- function(x, m) {
if (length(x) == 1) {
return(list(x))
}
return(combn(as.integer(x), m, simplify = FALSE))
}
## Load in data, name the adjacency matrix A, outcome Y, treatment Z, categorical covariates X
# Navigate to where the RProject is
#setwd('/Users/vittorioorlandi/Desktop/Network FLAME/Network-FLAME/')
setwd("/Users/musaidawan/Dropbox/Duke/Projects/Data for Network paper/Network-FLAME/")
village_codes <- setdiff(c(1:77), c(13,22))
net_flame_output <- matrix(NA, nrow = 77, ncol = 3)
# adjency_out <-  read.xlsx("/Users/musaidawan/Dropbox/Duke/Projects/Data for Network paper/Network-FLAME/flame_output/adjency_stats_sum_g_eq_3.xlsx",
#                          header = FALSE) %>%
#   as.matrix()
#high_d_villages <- adjency_out[which(adjency_out[,2] > 5 | adjency_out[,3] > 18)]
# adjency_out[ adjency_out[, 2] > 6 | adjency_out[, 3] > 18, ]
village_codes <- setdiff(c(9:77), c(13,22))
qs=1
val=1
A1 <-
read.csv(paste('./Data/Adjency/adj_visitgo_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A2 <-
read.csv(paste('./Data/Adjency/adj_visitcome_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A3 <-
read.csv(paste('./Data/Adjency/adj_rel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A4 <-
read.csv(paste('./Data/Adjency/adj_nonrel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
# union of three adjency matrix
A <- ((A1 + A2 + A3 + A4) >= 3) * 1
row_sum <- rowSums(A)
print(paste('average degree is:',mean(row_sum)))
print(paste('max degree is:',max(row_sum)))
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
# row index of untreated units
#untreated <- which(Z == 0)
untreated <- demographics$adjmatrix_key[demographics$Z == 0]
units_with_treatment_info <- demographics$adjmatrix_key
#A <- A[units_with_treatment_info, units_with_treatment_info]
Y <- demographics$Y
Z <- demographics$Z
X <- demographics[, which(!colnames(demographics) %in% c('adjmatrix_key', 'Y', 'Z'))]
X <- X[,c("age","telugu")]
# To drop control -- control edges
# A[untreated, untreated] <- 0
# To drop any edges involving a control individual
A[untreated, ] <- 0
A[, untreated] <- 0
n <- dim(A)[1]
A1 <-
read.csv(paste('./Data/Adjency/adj_visitgo_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A2 <-
read.csv(paste('./Data/Adjency/adj_visitcome_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A3 <-
read.csv(paste('./Data/Adjency/adj_rel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A4 <-
read.csv(paste('./Data/Adjency/adj_nonrel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
# union of three adjency matrix
A <- ((A1 + A2 + A3 + A4) >= 3) * 1
row_sum <- rowSums(A)
print(paste('average degree is:',mean(row_sum)))
print(paste('max degree is:',max(row_sum)))
# index of units with degree > threshold
index_max_connections <- which(row_sum > 15)
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
# row index of untreated units
#untreated <- which(Z == 0)
untreated <- demographics$adjmatrix_key[demographics$Z == 0]
units_with_treatment_info <- demographics$adjmatrix_key
#A <- A[units_with_treatment_info, units_with_treatment_info]
Y <- demographics$Y
Z <- demographics$Z
X <- demographics[, which(!colnames(demographics) %in% c('adjmatrix_key', 'Y', 'Z'))]
X <- X[,c("age","telugu")]
# To drop control -- control edges
# A[untreated, untreated] <- 0
# To drop any edges involving a control individual
A[untreated, untreated] <- 0
#A[, untreated] <- 0
n <- dim(A)[1]
# Gives graph
G <- graph_from_adjacency_matrix(A, mode = 'undirected')
threshold <- 4
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info, threshold)
all_features = gen_all_features(G, all_subgraphs)
all_features$feats
unlist(all_features$feats)
require(Rcpp)
require(RcppArmadillo)
require(igraph)
require(magrittr)
source('network_flame_sims_old.R')
source('FLAME_bit 2.R')
source('ATE.R')
sourceCpp('subgraph_enumerate_old.cpp')
require(purrr)
library(magrittr)
library(dplyr)
# library(splitstackshape)
bin_counts = function(dta, probs = seq(0, 1, length.out = 10)){
data.frame(apply(dta, 2, function(x){
qs = unique(quantile(x, probs))
if(length(unique(qs)) > 1){
xc = as.character(cut(x, breaks=qs, include.lowest = T))
xc[x==0] = '0'
return(xc)
}else{
return(as.character(x))
}
}),
stringsAsFactors = T)
}
is_degenerate <- function(train, holdout) {
train <- train[, -ncol(train)]
all_dat <-
rbind(train, holdout) %>%
mutate(data_type = c(rep(0, nrow(train)),
rep(1, nrow(holdout))))
treatment_by_outcome <-
all_dat %>%
group_by(outcome, data_type) %>%
summarise(n_treated = length(unique(treated))) %>%
pull(n_treated)
outcome_by_treated <-
all_dat %>%
group_by(treated, data_type) %>%
summarise(n_outcomes = length(unique(outcome))) %>%
pull(n_outcomes)
if (any(c(treatment_by_outcome, outcome_by_treated) == 1)) {
return(TRUE)
}
return(FALSE)
}
split_test_train <- function(tmp, percent_holdout = 0.1) {
tmp_treated <- filter(tmp, treated == 1)
n_treated <- nrow(tmp_treated)
treated_holdout_inds <- sample(1:n_treated, round(percent_holdout * n_treated))
tmp_treated_holdout <- tmp_treated[treated_holdout_inds, ]
tmp_treated_train <- tmp_treated[-treated_holdout_inds, ]
tmp_control <- filter(tmp, treated == 0)
n_control <- nrow(tmp_control)
control_holdout_inds <- sample(1:n_control, round(percent_holdout * n_control))
tmp_control_holdout <- tmp_control[control_holdout_inds, ]
tmp_control_train <- tmp_control[-control_holdout_inds, ]
tmp_train <- rbind(tmp_treated_train, tmp_control_train)
tmp_holdout <- rbind(tmp_treated_holdout, tmp_control_holdout)
# If don't have both treatments and both outcomes for
# both train and holdout, split again
if (length(unique(tmp_train$treated)) == 1 |
length(unique(tmp_train$outcome)) == 1 |
length(unique(tmp_holdout$treated)) == 1 |
length(unique(tmp_holdout$outcome)) == 1) {
return(split_test_train(tmp, percent_holdout))
}
return(list(train = tmp_train,
holdout = tmp_holdout))
}
my_combn <- function(x, m) {
if (length(x) == 1) {
return(list(x))
}
return(combn(as.integer(x), m, simplify = FALSE))
}
## Load in data, name the adjacency matrix A, outcome Y, treatment Z, categorical covariates X
# Navigate to where the RProject is
#setwd('/Users/vittorioorlandi/Desktop/Network FLAME/Network-FLAME/')
setwd("/Users/musaidawan/Dropbox/Duke/Projects/Data for Network paper/Network-FLAME/")
village_codes <- setdiff(c(1:77), c(13,22))
net_flame_output <- matrix(NA, nrow = 77, ncol = 3)
qs=1
val=1
A1 <-
read.csv(paste('./Data/Adjency/adj_visitgo_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A2 <-
read.csv(paste('./Data/Adjency/adj_visitcome_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A3 <-
read.csv(paste('./Data/Adjency/adj_rel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A4 <-
read.csv(paste('./Data/Adjency/adj_nonrel_vilno_',val,'.csv', sep = ""),
header = FALSE) %>%
as.matrix()
A <- ((A1 + A2 + A3 + A4) >= 3) * 1
row_sum <- rowSums(A)
print(paste('average degree is:',mean(row_sum)))
print(paste('max degree is:',max(row_sum)))
# index of units with degree > threshold
index_max_connections <- which(row_sum > 15)
demographics <- read.csv(paste('./Data/characteristics_',
qs,'/village_',val,'.csv',sep =""))
# row index of untreated units
#untreated <- which(Z == 0)
untreated <- demographics$adjmatrix_key[demographics$Z == 0]
# drop units with degree connection > 15
demographics <- demographics[!demographics$adjmatrix_key %in% index_max_connections,]
units_with_treatment_info <- demographics$adjmatrix_key
#A <- A[units_with_treatment_info, units_with_treatment_info]
Y <- demographics$Y
Z <- demographics$Z
X <- demographics[, which(!colnames(demographics) %in% c('adjmatrix_key', 'Y', 'Z'))]
X <- X[,c("age","telugu")]
# To drop control -- control edges
# A[untreated, untreated] <- 0
# To drop any edges involving a control individual
A[untreated, untreated] <- 0
#A[, untreated] <- 0
n <- dim(A)[1]
# Gives graph
G <- graph_from_adjacency_matrix(A, mode = 'undirected')
threshold <- 4
# Enumerates all possible subgraphs and puts into dataframe
all_subgraphs <- get_neighb_subgraphs(A, units_with_treatment_info, threshold)
all_features = gen_all_features(G, all_subgraphs)
all_features$feats
unlist(all_features$feats)
all_features$types
